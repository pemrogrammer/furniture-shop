{"version":3,"sources":["../../src/tests/users.test.ts"],"sourcesContent":["import bcrypt from 'bcrypt';\r\nimport { Sequelize } from 'sequelize';\r\nimport request from 'supertest';\r\nimport App from '@/app';\r\nimport { CreateUserDto } from '@dtos/users.dto';\r\nimport UserRoute from '@routes/users.route';\r\n\r\nafterAll(async () => {\r\n  await new Promise<void>(resolve => setTimeout(() => resolve(), 500));\r\n});\r\n\r\ndescribe('Testing Users', () => {\r\n  describe('[GET] /users', () => {\r\n    it('response findAll users', async () => {\r\n      const usersRoute = new UserRoute();\r\n      const users = usersRoute.usersController.userService.users;\r\n\r\n      users.findAll = jest.fn().mockReturnValue([\r\n        {\r\n          id: 1,\r\n          email: 'a@email.com',\r\n          password: await bcrypt.hash('q1w2e3r4!', 10),\r\n        },\r\n        {\r\n          id: 2,\r\n          email: 'b@email.com',\r\n          password: await bcrypt.hash('a1s2d3f4!', 10),\r\n        },\r\n        {\r\n          id: 3,\r\n          email: 'c@email.com',\r\n          password: await bcrypt.hash('z1x2c3v4!', 10),\r\n        },\r\n      ]);\r\n\r\n      (Sequelize as any).authenticate = jest.fn();\r\n      const app = new App([usersRoute]);\r\n      return request(app.getServer()).get(`${usersRoute.path}`).expect(200);\r\n    });\r\n  });\r\n\r\n  describe('[GET] /users/:id', () => {\r\n    it('response findOne user', async () => {\r\n      const userId = 1;\r\n\r\n      const usersRoute = new UserRoute();\r\n      const users = usersRoute.usersController.userService.users;\r\n\r\n      users.findByPk = jest.fn().mockReturnValue({\r\n        id: 1,\r\n        email: 'a@email.com',\r\n        password: await bcrypt.hash('q1w2e3r4!', 10),\r\n      });\r\n\r\n      (Sequelize as any).authenticate = jest.fn();\r\n      const app = new App([usersRoute]);\r\n      return request(app.getServer()).get(`${usersRoute.path}/${userId}`).expect(200);\r\n    });\r\n  });\r\n\r\n  describe('[POST] /users', () => {\r\n    it('response Create user', async () => {\r\n      const userData: CreateUserDto = {\r\n        email: 'test@email.com',\r\n        password: 'q1w2e3r4!',\r\n      };\r\n\r\n      const usersRoute = new UserRoute();\r\n      const users = usersRoute.usersController.userService.users;\r\n\r\n      users.findOne = jest.fn().mockReturnValue(null);\r\n      users.create = jest.fn().mockReturnValue({\r\n        id: 1,\r\n        email: userData.email,\r\n        password: await bcrypt.hash(userData.password, 10),\r\n      });\r\n\r\n      (Sequelize as any).authenticate = jest.fn();\r\n      const app = new App([usersRoute]);\r\n      return request(app.getServer()).post(`${usersRoute.path}`).send(userData).expect(201);\r\n    });\r\n  });\r\n\r\n  describe('[PUT] /users/:id', () => {\r\n    it('response Update user', async () => {\r\n      const userId = 1;\r\n      const userData: CreateUserDto = {\r\n        email: 'test@email.com',\r\n        password: '1q2w3e4r!',\r\n      };\r\n\r\n      const usersRoute = new UserRoute();\r\n      const users = usersRoute.usersController.userService.users;\r\n\r\n      users.findByPk = jest.fn().mockReturnValue({\r\n        id: userId,\r\n        email: userData.email,\r\n        password: await bcrypt.hash(userData.password, 10),\r\n      });\r\n      users.update = jest.fn().mockReturnValue([1]);\r\n      users.findByPk = jest.fn().mockReturnValue({\r\n        id: userId,\r\n        email: userData.email,\r\n        password: await bcrypt.hash(userData.password, 10),\r\n      });\r\n\r\n      (Sequelize as any).authenticate = jest.fn();\r\n      const app = new App([usersRoute]);\r\n      return request(app.getServer()).put(`${usersRoute.path}/${userId}`).send(userData).expect(200);\r\n    });\r\n  });\r\n\r\n  describe('[DELETE] /users/:id', () => {\r\n    it('response Delete user', async () => {\r\n      const userId = 1;\r\n\r\n      const usersRoute = new UserRoute();\r\n      const users = usersRoute.usersController.userService.users;\r\n\r\n      users.findByPk = jest.fn().mockReturnValue({\r\n        id: userId,\r\n        email: 'a@email.com',\r\n        password: await bcrypt.hash('q1w2e3r4!', 10),\r\n      });\r\n\r\n      (Sequelize as any).authenticate = jest.fn();\r\n      const app = new App([usersRoute]);\r\n      return request(app.getServer()).delete(`${usersRoute.path}/${userId}`).expect(200);\r\n    });\r\n  });\r\n});\r\n"],"names":["afterAll","Promise","resolve","setTimeout","describe","it","usersRoute","UserRoute","users","usersController","userService","findAll","jest","fn","mockReturnValue","id","email","password","bcrypt","hash","Sequelize","authenticate","app","App","request","getServer","get","path","expect","userId","findByPk","userData","findOne","create","post","send","update","put","delete"],"mappings":"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"}