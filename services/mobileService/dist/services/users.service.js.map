{"version":3,"sources":["../../src/services/users.service.ts"],"sourcesContent":["import { hash } from 'bcrypt';\r\nimport DB from '@databases';\r\nimport { CreateUserDto } from '@dtos/users.dto';\r\nimport { HttpException } from '@exceptions/HttpException';\r\nimport { User } from '@interfaces/users.interface';\r\nimport { isEmpty } from '@utils/util';\r\n\r\nclass UserService {\r\n  public users = DB.Users;\r\n\r\n  public async findAllUser(): Promise<User[]> {\r\n    const allUser: User[] = await this.users.findAll();\r\n    return allUser;\r\n  }\r\n\r\n  public async findUserById(userId: number): Promise<User> {\r\n    if (isEmpty(userId)) throw new HttpException(400, \"You're not userId\");\r\n\r\n    const findUser: User = await this.users.findByPk(userId);\r\n    if (!findUser) throw new HttpException(409, \"You're not user\");\r\n\r\n    return findUser;\r\n  }\r\n\r\n  public async createUser(userData: CreateUserDto): Promise<User> {\r\n    if (isEmpty(userData)) throw new HttpException(400, \"You're not userData\");\r\n\r\n    const findUser: User = await this.users.findOne({ where: { email: userData.email } });\r\n    if (findUser) throw new HttpException(409, `You're email ${userData.email} already exists`);\r\n\r\n    const hashedPassword = await hash(userData.password, 10);\r\n    const createUserData: User = await this.users.create({ ...userData, password: hashedPassword });\r\n    return createUserData;\r\n  }\r\n\r\n  public async updateUser(userId: number, userData: CreateUserDto): Promise<User> {\r\n    if (isEmpty(userData)) throw new HttpException(400, \"You're not userData\");\r\n\r\n    const findUser: User = await this.users.findByPk(userId);\r\n    if (!findUser) throw new HttpException(409, \"You're not user\");\r\n\r\n    const hashedPassword = await hash(userData.password, 10);\r\n    await this.users.update({ ...userData, password: hashedPassword }, { where: { id: userId } });\r\n\r\n    const updateUser: User = await this.users.findByPk(userId);\r\n    return updateUser;\r\n  }\r\n\r\n  public async deleteUser(userId: number): Promise<User> {\r\n    if (isEmpty(userId)) throw new HttpException(400, \"You're not userId\");\r\n\r\n    const findUser: User = await this.users.findByPk(userId);\r\n    if (!findUser) throw new HttpException(409, \"You're not user\");\r\n\r\n    await this.users.destroy({ where: { id: userId } });\r\n\r\n    return findUser;\r\n  }\r\n}\r\n\r\nexport default UserService;\r\n"],"names":["UserService","findAllUser","allUser","users","findAll","findUserById","userId","isEmpty","HttpException","findUser","findByPk","createUser","userData","findOne","where","email","hashedPassword","hash","password","createUserData","create","updateUser","update","id","deleteUser","destroy","DB","Users"],"mappings":"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"}