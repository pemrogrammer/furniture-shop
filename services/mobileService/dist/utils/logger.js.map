{"version":3,"sources":["../../src/utils/logger.ts"],"sourcesContent":["import { existsSync, mkdirSync } from 'fs';\r\nimport { join } from 'path';\r\nimport winston from 'winston';\r\nimport winstonDaily from 'winston-daily-rotate-file';\r\nimport { LOG_DIR } from '@config';\r\n\r\n// logs dir\r\nconst logDir: string = join(__dirname, LOG_DIR);\r\n\r\nif (!existsSync(logDir)) {\r\n  mkdirSync(logDir);\r\n}\r\n\r\n// Define log format\r\nconst logFormat = winston.format.printf(({ timestamp, level, message }) => `${timestamp} ${level}: ${message}`);\r\n\r\n/*\r\n * Log Level\r\n * error: 0, warn: 1, info: 2, http: 3, verbose: 4, debug: 5, silly: 6\r\n */\r\nconst logger = winston.createLogger({\r\n  format: winston.format.combine(\r\n    winston.format.timestamp({\r\n      format: 'YYYY-MM-DD HH:mm:ss',\r\n    }),\r\n    logFormat,\r\n  ),\r\n  transports: [\r\n    // debug log setting\r\n    new winstonDaily({\r\n      level: 'debug',\r\n      datePattern: 'YYYY-MM-DD',\r\n      dirname: logDir + '/debug', // log file /logs/debug/*.log in save\r\n      filename: `%DATE%.log`,\r\n      maxFiles: 30, // 30 Days saved\r\n      json: false,\r\n      zippedArchive: true,\r\n    }),\r\n    // error log setting\r\n    new winstonDaily({\r\n      level: 'error',\r\n      datePattern: 'YYYY-MM-DD',\r\n      dirname: logDir + '/error', // log file /logs/error/*.log in save\r\n      filename: `%DATE%.log`,\r\n      maxFiles: 30, // 30 Days saved\r\n      handleExceptions: true,\r\n      json: false,\r\n      zippedArchive: true,\r\n    }),\r\n  ],\r\n});\r\n\r\nlogger.add(\r\n  new winston.transports.Console({\r\n    format: winston.format.combine(winston.format.splat(), winston.format.colorize()),\r\n  }),\r\n);\r\n\r\nconst stream = {\r\n  write: (message: string) => {\r\n    logger.info(message.substring(0, message.lastIndexOf('\\n')));\r\n  },\r\n};\r\n\r\nexport { logger, stream };\r\n"],"names":["logDir","join","__dirname","LOG_DIR","existsSync","mkdirSync","logFormat","winston","format","printf","timestamp","level","message","logger","createLogger","combine","transports","winstonDaily","datePattern","dirname","filename","maxFiles","json","zippedArchive","handleExceptions","add","Console","splat","colorize","stream","write","info","substring","lastIndexOf"],"mappings":"AAAA;;;;;AAAsC,IAAA,GAAI,WAAJ,IAAI,CAAA;AACrB,IAAA,KAAM,WAAN,MAAM,CAAA;AACP,IAAA,QAAS,kCAAT,SAAS,EAAA;AACJ,IAAA,uBAA2B,kCAA3B,2BAA2B,EAAA;AAC5B,IAAA,OAAS,WAAT,WAAS,CAAA;;;;;;AAGjC,MAAMA,MAAM,GAAWC,CAAAA,GAAAA,KAAI,AAAoB,CAAA,KAApB,CAACC,SAAS,EAAEC,OAAO,QAAA,CAAC,AAAC;AAEhD,IAAI,CAACC,CAAAA,GAAAA,GAAU,AAAQ,CAAA,WAAR,CAACJ,MAAM,CAAC,EAAE;IACvBK,CAAAA,GAAAA,GAAS,AAAQ,CAAA,UAAR,CAACL,MAAM,CAAC,CAAC;CACnB;AAGD,MAAMM,SAAS,GAAGC,QAAO,QAAA,CAACC,MAAM,CAACC,MAAM,CAAC,CAAC,EAAEC,SAAS,CAAA,EAAEC,KAAK,CAAA,EAAEC,OAAO,CAAA,EAAE,GAAK,CAAC,EAAEF,SAAS,CAAC,CAAC,EAAEC,KAAK,CAAC,EAAE,EAAEC,OAAO,CAAC,CAAC;AAAA,CAAC,AAAC;AAMhH,MAAMC,MAAM,GAAGN,QAAO,QAAA,CAACO,YAAY,CAAC;IAClCN,MAAM,EAAED,QAAO,QAAA,CAACC,MAAM,CAACO,OAAO,CAC5BR,QAAO,QAAA,CAACC,MAAM,CAACE,SAAS,CAAC;QACvBF,MAAM,EAAE,qBAAqB;KAC9B,CAAC,EACFF,SAAS,CACV;IACDU,UAAU,EAAE;QAEV,IAAIC,uBAAY,QAAA,CAAC;YACfN,KAAK,EAAE,OAAO;YACdO,WAAW,EAAE,YAAY;YACzBC,OAAO,EAAEnB,MAAM,GAAG,QAAQ;YAC1BoB,QAAQ,EAAE,CAAC,UAAU,CAAC;YACtBC,QAAQ,EAAE,EAAE;YACZC,IAAI,EAAE,KAAK;YACXC,aAAa,EAAE,IAAI;SACpB,CAAC;QAEF,IAAIN,uBAAY,QAAA,CAAC;YACfN,KAAK,EAAE,OAAO;YACdO,WAAW,EAAE,YAAY;YACzBC,OAAO,EAAEnB,MAAM,GAAG,QAAQ;YAC1BoB,QAAQ,EAAE,CAAC,UAAU,CAAC;YACtBC,QAAQ,EAAE,EAAE;YACZG,gBAAgB,EAAE,IAAI;YACtBF,IAAI,EAAE,KAAK;YACXC,aAAa,EAAE,IAAI;SACpB,CAAC;KACH;CACF,CAAC,AAAC;QAcMV,MAAM,GAANA,MAAM;AAZfA,MAAM,CAACY,GAAG,CACR,IAAIlB,QAAO,QAAA,CAACS,UAAU,CAACU,OAAO,CAAC;IAC7BlB,MAAM,EAAED,QAAO,QAAA,CAACC,MAAM,CAACO,OAAO,CAACR,QAAO,QAAA,CAACC,MAAM,CAACmB,KAAK,EAAE,EAAEpB,QAAO,QAAA,CAACC,MAAM,CAACoB,QAAQ,EAAE,CAAC;CAClF,CAAC,CACH,CAAC;AAEF,MAAMC,MAAM,GAAG;IACbC,KAAK,EAAE,CAAClB,OAAe,GAAK;QAC1BC,MAAM,CAACkB,IAAI,CAACnB,OAAO,CAACoB,SAAS,CAAC,CAAC,EAAEpB,OAAO,CAACqB,WAAW,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC;KAC9D;CACF,AAAC;QAEeJ,MAAM,GAANA,MAAM"}