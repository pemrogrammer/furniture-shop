{"version":3,"sources":["../src/app.ts"],"sourcesContent":["import compression from 'compression';\nimport cookieParser from 'cookie-parser';\nimport cors from 'cors';\nimport express from 'express';\nimport helmet from 'helmet';\nimport hpp from 'hpp';\nimport morgan from 'morgan';\nimport swaggerJSDoc from 'swagger-jsdoc';\nimport swaggerUi from 'swagger-ui-express';\nimport { NODE_ENV, PORT, LOG_FORMAT, ORIGIN, CREDENTIALS } from '@config';\nimport DB from '@databases';\nimport { Routes } from '@interfaces/routes.interface';\nimport errorMiddleware from '@middlewares/error.middleware';\nimport { logger, stream } from '@utils/logger';\n\nclass App {\n  public app: express.Application;\n  public env: string;\n  public port: string | number;\n\n  constructor(routes: Routes[]) {\n    this.app = express();\n    this.env = NODE_ENV || 'development';\n    this.port = PORT || 8001;\n\n    // this.connectToDatabase();\n    // this.initializeMiddlewares();\n    this.initializeRoutes(routes);\n    // this.initializeSwagger();\n    // this.initializeErrorHandling();\n  }\n\n  public listen() {\n    this.app.listen(this.port, () => {\n      logger.info(`=================================`);\n      logger.info(`======= ENV: ${this.env} =======`);\n      logger.info(`ðŸš€ App listening on the port ${this.port}`);\n      logger.info(`=================================`);\n    });\n  }\n\n  public getServer() {\n    return this.app;\n  }\n\n  // private connectToDatabase() {\n  //   DB.sequelize.sync({ force: false });\n  // }\n\n  // private initializeMiddlewares() {\n  //   this.app.use(morgan(LOG_FORMAT, { stream }));\n  //   this.app.use(cors({ origin: ORIGIN, credentials: CREDENTIALS }));\n  //   this.app.use(hpp());\n  //   this.app.use(helmet());\n  //   this.app.use(compression());\n  //   this.app.use(express.json());\n  //   this.app.use(express.urlencoded({ extended: true }));\n  //   this.app.use(cookieParser());\n  // }\n\n  private initializeRoutes(routes: Routes[]) {\n    routes.forEach(route => {\n      this.app.use('/', route.router);\n    });\n  }\n\n  // private initializeSwagger() {\n  //   const options = {\n  //     swaggerDefinition: {\n  //       info: {\n  //         title: 'REST API',\n  //         version: '1.0.0',\n  //         description: 'Example docs',\n  //       },\n  //     },\n  //     apis: ['swagger.yaml'],\n  //   };\n\n  //   const specs = swaggerJSDoc(options);\n  //   this.app.use('/api-docs', swaggerUi.serve, swaggerUi.setup(specs));\n  // }\n\n  // private initializeErrorHandling() {\n  //   this.app.use(errorMiddleware);\n  // }\n}\n\nexport default App;\n"],"names":["App","listen","app","port","logger","info","env","getServer","initializeRoutes","routes","forEach","route","use","router","constructor","express","NODE_ENV","PORT"],"mappings":"AAAA;;;;;AAGoB,IAAA,QAAS,kCAAT,SAAS,EAAA;AAMmC,IAAA,OAAS,WAAT,UAAS,CAAA;AAI1C,IAAA,OAAe,WAAf,gBAAe,CAAA;;;;;;AAE9C,IAAA,AAAMA,GAAG,GAAT,MAAMA,GAAG;IAiBP,AAAOC,MAAM,GAAG;QACd,IAAI,CAACC,GAAG,CAACD,MAAM,CAAC,IAAI,CAACE,IAAI,EAAE,IAAM;YAC/BC,OAAM,OAAA,CAACC,IAAI,CAAC,CAAC,iCAAiC,CAAC,CAAC,CAAC;YACjDD,OAAM,OAAA,CAACC,IAAI,CAAC,CAAC,aAAa,EAAE,IAAI,CAACC,GAAG,CAAC,QAAQ,CAAC,CAAC,CAAC;YAChDF,OAAM,OAAA,CAACC,IAAI,CAAC,CAAC,+BAA4B,EAAE,IAAI,CAACF,IAAI,CAAC,CAAC,CAAC,CAAC;YACxDC,OAAM,OAAA,CAACC,IAAI,CAAC,CAAC,iCAAiC,CAAC,CAAC,CAAC;SAClD,CAAC,CAAC;KACJ;IAED,AAAOE,SAAS,GAAG;QACjB,OAAO,IAAI,CAACL,GAAG,CAAC;KACjB;IAiBD,AAAQM,gBAAgB,CAACC,MAAgB,EAAE;QACzCA,MAAM,CAACC,OAAO,CAACC,CAAAA,KAAK,GAAI;YACtB,IAAI,CAACT,GAAG,CAACU,GAAG,CAAC,GAAG,EAAED,KAAK,CAACE,MAAM,CAAC,CAAC;SACjC,CAAC,CAAC;KACJ;IA5CDC,YAAYL,MAAgB,CAAE;QAC5B,IAAI,CAACP,GAAG,GAAGa,CAAAA,GAAAA,QAAO,AAAE,CAAA,QAAF,EAAE,CAAC;QACrB,IAAI,CAACT,GAAG,GAAGU,OAAQ,SAAA,IAAI,aAAa,CAAC;QACrC,IAAI,CAACb,IAAI,GAAGc,OAAI,KAAA,IAAI,IAAI,CAAC;QAIzB,IAAI,CAACT,gBAAgB,CAACC,MAAM,CAAC,CAAC;KAG/B;CAuDF;eAEcT,GAAG"}